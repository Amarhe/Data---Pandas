import pandas as pd

ufo = pd.read_csv("http://bit.ly/uforeports")
ufo.head()

City	Colors Reported	Shape Reported	State	Time
0	Ithaca	NaN	TRIANGLE	NY	6/1/1930 22:00
1	Willingboro	NaN	OTHER	NJ	6/30/1930 20:00
2	Holyoke	NaN	OVAL	CO	2/15/1931 14:00
3	Abilene	NaN	DISK	KS	6/1/1931 13:00
4	New York Worlds Fair	NaN	LIGHT	NY	4/18/1933 19:00

ufo["City"].head() # wczytanie wybranej kolumny, wielkosc liter ma znaczenie !

0                  Ithaca
1             Willingboro
2                 Holyoke
3                 Abilene
4    New York Worlds Fair
Name: City, dtype: object

ufo.City.head() # drugi sposób na wczytanie jednej kolumny , nie dziala gdy nazwa kolumny
                #jest dwuczlonowa i dzielona spacja ! Jeżeli nazwa kolumny jest taka sama
                #jak nazwa funkcji dla kolumny w pandas ta metoda także nie zadziała ! (np. ufo.shape)
                
0                  Ithaca
1             Willingboro
2                 Holyoke
3                 Abilene
4    New York Worlds Fair
Name: City, dtype: object

ufo["Location"] = ufo.City + ", " + ufo.State # tworzenie nowej kolumny w bazie danych (nazwa jako string i w []),
                                              # można dodawać do siebie kolumny o takim samym typie
                                              #(object + object, int + int)
ufo.head()


City	Colors Reported	Shape Reported	State	Time	Location
0	Ithaca	NaN	TRIANGLE	NY	6/1/1930 22:00	Ithaca, NY
1	Willingboro	NaN	OTHER	NJ	6/30/1930 20:00	Willingboro, NJ
2	Holyoke	NaN	OVAL	CO	2/15/1931 14:00	Holyoke, CO
3	Abilene	NaN	DISK	KS	6/1/1931 13:00	Abilene, KS
4	New York Worlds Fair	NaN	LIGHT	NY	4/18/1933 19:00	New York Worlds Fair, NY

#................................................................................................................................

ufo = pd.read_csv("http://bit.ly/uforeports")
ufo.head()

ufo.columns # wczytuje liste z nazwami kolumn jakie znajdują sie w importowanej bazie danych

Index(['City', 'Colors Reported', 'Shape Reported', 'State', 'Time'], dtype='object')

ufo.rename(columns={"Colors Reported" : "Colors_Reported",
                   "Shape Reported": "Shape_Reported"}, inplace=True)
ufo.columns # sposob na zmianienie nazwy kolumn (uzywa sie funkcji slownika jako argumentu dla funkcji rename)

Index(['city', 'colors_reported', 'shape_reported', 'state', 'time'], dtype='object')

new_columns = ["city", "colors reported", "shape reported", "state", "time"]
ufo.columns = new_columns
ufo.columns  # kolejny sposob na zmiane nazw (stworzenie listy z nowymi nazwami i przypisanie jej do funkcji .rename)

Index(['city', 'colors reported', 'shape reported', 'state', 'time'], dtype='object')

ufo = pd.read_csv("http://bit.ly/uforeports", names = new_columns, header=0)
ufo.columns # kolejny sposób na zmiane nazw to podczas wczytywania bazy danych uzyc argumentu name= ,
           # i przypisac do niego liste z nazwami (należy użyc rownież argumentu header=0 aby zadzialalo)
           
 Index(['city', 'colors reported', 'shape reported', 'state', 'time'], dtype='object')
 
ufo.columns = ufo.columns.str.replace(" ","_")
ufo.columns #sposob polega na zmianie danego znaku za pomoca funkcji str.replace, bardzo uzytyeczny sposob gdy
            # mamy baze danych z ogromna iloscia kolumn i tzreba zmianic ich nazwy badz zamienic spację na "_"
            
Index(['city', 'colors_reported', 'shape_reported', 'state', 'time'], dtype='object')           
 
 















